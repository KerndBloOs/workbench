# ~/.bashrc
#

###### bash-config #######

# load bash_alias if present
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# set editing mode
set -o vi

# load bash-completion

if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
elif [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
fi




###### path configuration ###### 

# add path directories and avoid duplicates
add_to_path() {
  case ":$PATH:" in
    *":$1:"*) ;; # already there
    *) export PATH="$1:$PATH" ;;
  esac
}
add_to_path "$HOME/bin:$HOME/.local/bin:/home/vscode/.local/bin:/root/.local/bin"

shopt -s extglob    # Enables extended globbing
shopt -s nullglob   # Makes unmatched globs expand to nothing


# for dev container
if [ -d "/home/linuxbrew/.linuxbrew" ]; then
     eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# history
export HISTSIZE=500
export HISTSIZE=50000
export HISTTIMEFORMAT="%F %T" # add timestamp to history
export HISTCONTROL=erasedups:ignoredups:ignorespace

shopt -s histappend # causes bash to append to history instead of overwriting it
PROMPT_COMMAND='history -a'

# directories
export GR="$HOME/git-repos"
export GITUSER="kerndbloos"
export DOTFILES="$HOME/.local/share/chezmoi"

# temp directory

if command -v devpod >/dev/null 2>&1; then
    # Set custom temp directory
    TMPDIR=/tmp/$USER
    # Only create directory if it doesn't exist
    if [ ! -d "$TMPDIR" ]; then
        mkdir -p "$TMPDIR"
        chmod 755 "$TMPDIR"
    fi
 
    # Export the environment variables
    export TMPDIR="$TMPDIR"
fi




###### tools ######

# neovim
if command -v nvim > /dev/null ; then
  export EDITOR="nvim"
  export VISUAL="nvim"
fi

# fzf
if command -v fzf > /dev/null ; then
  eval "$(fzf --bash)" 
fi

# mise
if command -v mise > /dev/null ; then
  eval "$($HOME/.local/bin/mise activate bash)"
fi

# ssh agent
if [ -z "$SSH_AUTH_SOCK" ] ; then
    eval $(ssh-agent -s)
    ssh-add
fi

# tmux
# Dynamic Tmux Teleport TSH Status Configuration

# Function to detect Teleport session and get connection info
detect_teleport_session() {
    local teleport_info=""
    local is_teleport=false
    
    # Check if we're in a Teleport session by looking for environment variables
    if [[ -n "$TELEPORT_SESSION" ]] || [[ -n "$TSH_SESSION" ]]; then
        is_teleport=true
    fi
    
    # Alternative: Check if tsh is available and we have an active session
    if command -v tsh >/dev/null 2>&1; then
        local tsh_status=$(tsh status --format=json 2>/dev/null)
        if [[ $? -eq 0 ]] && [[ -n "$tsh_status" ]]; then
            # Parse JSON to get current cluster info
            local cluster=$(echo "$tsh_status" | grep -o '"cluster":"[^"]*"' | cut -d'"' -f4)
            
            if [[ -n "$cluster" ]]; then
                teleport_info="${cluster}"
                is_teleport=true
            fi
        fi
    fi
    
    # Fallback: Check for SSH connection that might be through Teleport
    if [[ "$is_teleport" == false ]] && [[ -n "$SSH_CONNECTION" ]]; then
        # Check if parent process or connection string suggests Teleport
        if pgrep -f "tsh.*ssh" >/dev/null 2>&1 || [[ "$SSH_CONNECTION" == *":3022 "* ]]; then
            is_teleport=true
            teleport_info="$(whoami)@$(hostname -s)"
        fi
    fi
    
    echo "${is_teleport}|${teleport_info}"
}

# Function to get Teleport node/server information
get_teleport_node_info() {
    if command -v tsh >/dev/null 2>&1; then
        # Try to get current node information
        local node_info=$(tsh ls --format=text 2>/dev/null | grep "$(hostname)" | head -1)
        if [[ -n "$node_info" ]]; then
            # Extract relevant info (hostname, labels, etc.)
            echo "$node_info" | awk '{print $1}'
        else
            hostname -s
        fi
    else
        hostname -s
    fi
}

# Function to update tmux status based on Teleport connection
update_tmux_teleport_status() {
    if [[ -n "$TMUX" ]]; then
        local teleport_result=$(detect_teleport_session)
        local is_teleport=$(echo "$teleport_result" | cut -d'|' -f1)
        local teleport_info=$(echo "$teleport_result" | cut -d'|' -f2)
        
        if [[ "$is_teleport" == "true" ]]; then
            # We're in a Teleport session
            if [[ -n "$teleport_info" ]]; then
                tmux set-option -g status-left "⟡ ${teleport_info} "
            else
                # Fallback to basic info
                local node_info=$(get_teleport_node_info)
                tmux set-option -g status-left "⟡ ${node_info} "
            fi
        else
            # Local session
            tmux set-option -g status-left "  local "
        fi
        # Refresh tmux status
        tmux refresh-client -S
    fi
}

# Function to set up tmux for Teleport detection
setup_tmux_teleport() {
    if [[ -n "$TMUX" ]]; then
        # Set initial status
        update_tmux_teleport_status
        
        # Configure tmux status bar format
        tmux set-option -g status-left-length 40
        
        # Update status on pane changes
        tmux set-hook -g after-select-pane 'run-shell "bash -c update_tmux_teleport_status"'
        tmux set-hook -g after-select-window 'run-shell "bash -c update_tmux_teleport_status"'
    fi
}

# TSH wrapper function to update tmux status
tsh() {
    local cmd="$1"
    shift
    
    if [[ -n "$TMUX" ]]; then
        case "$cmd" in
            ssh|login)
                # Set status to show connecting
                tmux set-option -g status-left "⟡ connecting... "
                tmux refresh-client -S
                
                # Execute TSH command
                command tsh "$cmd" "$@"
                local tsh_exit_code=$?
                
                # Update status after connection
                update_tmux_teleport_status
                
                return $tsh_exit_code
                ;;
            logout)
                # Execute logout
                command tsh "$cmd" "$@"
                local tsh_exit_code=$?
                
                # Reset to local status
                tmux set-option -g status-left "  local "
                tmux refresh-client -S
                
                return $tsh_exit_code
                ;;
            *)
                # For other tsh commands, just run normally
                command tsh "$cmd" "$@"
                ;;
        esac
    else
        # Not in tmux, just run tsh normally
        command tsh "$cmd" "$@"
    fi
}

# Enhanced function to show Teleport cluster and role information
update_tmux_teleport_status_enhanced() {
    if [[ -n "$TMUX" ]]; then
        if command -v tsh >/dev/null 2>&1; then
            local tsh_status=$(tsh status --format=json 2>/dev/null)
            
            if [[ $? -eq 0 ]] && [[ -n "$tsh_status" ]]; then
                # Parse Teleport session information
                local cluster=$(echo "$tsh_status" | grep -o '"cluster":"[^"]*"' | cut -d'"' -f4)
                local roles=$(echo "$tsh_status" | grep -o '"roles":\[[^]]*\]' | sed 's/"roles":\[//; s/\]//; s/"//g')
                
                if [[ -n "$cluster" ]]; then
                    local status_text="⟡ ${cluster}"
                    
                    # Add role information if available
                    if [[ -n "$roles" ]] && [[ "$roles" != "null" ]]; then
                        local role_count=$(echo "$roles" | tr ',' '\n' | wc -l)
                        if [[ $role_count -gt 1 ]]; then
                            status_text="${status_text} (+${role_count} roles)"
                        else
                            status_text="${status_text} (${roles})"
                        fi
                    fi
                    
                    tmux set-option -g status-left "${status_text} "
                else
                    # Fallback for active session without full info
                    tmux set-option -g status-left "⟡ teleport "
                fi
            else
                # Check if we're still in a Teleport SSH session
                local teleport_result=$(detect_teleport_session)
                local is_teleport=$(echo "$teleport_result" | cut -d'|' -f1)
                local teleport_info=$(echo "$teleport_result" | cut -d'|' -f2)
                
                if [[ "$is_teleport" == "true" ]] && [[ -n "$teleport_info" ]]; then
                    tmux set-option -g status-left "⟡ ${teleport_info} "
                else
                    tmux set-option -g status-left "  local "
                fi
            fi
        else
            # tsh not available, fallback to SSH detection
            if [[ -n "$SSH_CONNECTION" ]]; then
                tmux set-option -g status-left "$(hostname -s) "
            else
                tmux set-option -g status-left "  local "
            fi
        fi
        tmux refresh-client -S
    fi
}

# Function to show current Teleport status
teleport-status() {
    if command -v tsh >/dev/null 2>&1; then
        echo "=== Teleport Status ==="
        tsh status
        echo
        echo "=== Available Nodes ==="
        tsh ls | head -10
    else
        echo "tsh command not found. Is Teleport installed?"
    fi
}

# Function to quickly connect to Teleport nodes
teleport-connect() {
    if [[ -z "$1" ]]; then
        echo "Usage: teleport-connect <node-name>"
        echo "Available nodes:"
        tsh ls --format=text | head -5
        return 1
    fi
    
    if [[ -n "$TMUX" ]]; then
        tmux set-option -g status-left "⟡ connecting to $1... "
        tmux refresh-client -S
    fi
    
    tsh ssh "$1"
}

# PROMPT_COMMAND integration for automatic updates
if [[ -n "$TMUX" ]]; then
    # Add our function to PROMPT_COMMAND if it's not already there
    if [[ "$PROMPT_COMMAND" != *"update_tmux_teleport_status"* ]]; then
        if [[ -n "$PROMPT_COMMAND" ]]; then
            export PROMPT_COMMAND="$PROMPT_COMMAND; update_tmux_teleport_status_enhanced"
        else
            export PROMPT_COMMAND="update_tmux_teleport_status_enhanced"
        fi
    fi
    
    # Initial setup when bashrc is sourced
    setup_tmux_teleport
fi

# Optional: Function to manually set custom status with Teleport theme
tmux-teleport-status() {
    if [[ -n "$TMUX" ]] && [[ -n "$1" ]]; then
        tmux set-option -g status-left "⟡ $1 "
        tmux refresh-client -S
    else
        echo "Usage: tmux-teleport-status <status_text>"
        echo "Must be run inside tmux session"
    fi
}


###### aliases ######

alias t='/usr/bin/tmux attach || /usr/bin/tmux'
alias c='clear'
alias catp='bat --plain --paging=never'
alias v='nvim'
alias x='exit'
alias ..="cd .."
alias ll='ls -lgha --color=auto'
alias la='ls -lathr'
alias key='eval $(ssh-agent -s); ssh-add'
alias his='history | fzf'
alias d='devpod'
alias ds='devpod ssh'

# devcontainer
alias ws='cd /workspaces/$DEVPOD_WORKSPACE_ID'

# weather
w () { # weather for specific location
  curl "https://wttr.in/$1?1&F&q"
}

wv () { # weather forecast for specific location
  curl "https://wttr.in/$2?format=1"
}

if command -v bat > /dev/null ; then
  alias cat="bat"
fi

# git
alias ga='git add'
alias gc='git commit -m'
alias gcl='git clone'
alias gp='git push'
alias gre='git reset'
alias gs='git status'
alias gu='git pull'
alias lg='lazygit'

# directories
alias gd='cd $DOTFILES; ls -la --color=auto'
alias gr='cd $HOME/git-repos/; ls -la --color=auto'

# credits to mischavandenburg
# use fp to do a fzf search and preview the files
alias fp="fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'"
# search for a file with fzf and open it in vim
alias vf='vim $(fp)'

# load starship
if command -v starship > /dev/null ; then
  eval "$(starship init bash)"
fi

